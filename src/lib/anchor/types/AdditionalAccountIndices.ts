/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link AdditionalAccountIndices} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link AdditionalAccountIndices} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type AdditionalAccountIndicesRecord = {
  TokenOwnership: { tokenIdx: number }
  NftOwnership: { tokenIdx: number; metaIdx: number; collectionIdx: number }
  Null: void /* scalar variant */
}

/**
 * Union type respresenting the AdditionalAccountIndices data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isAdditionalAccountIndices*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type AdditionalAccountIndices =
  beet.DataEnumKeyAsKind<AdditionalAccountIndicesRecord>

export const isAdditionalAccountIndicesTokenOwnership = (
  x: AdditionalAccountIndices
): x is AdditionalAccountIndices & { __kind: 'TokenOwnership' } =>
  x.__kind === 'TokenOwnership'
export const isAdditionalAccountIndicesNftOwnership = (
  x: AdditionalAccountIndices
): x is AdditionalAccountIndices & { __kind: 'NftOwnership' } =>
  x.__kind === 'NftOwnership'
export const isAdditionalAccountIndicesNull = (
  x: AdditionalAccountIndices
): x is AdditionalAccountIndices & { __kind: 'Null' } => x.__kind === 'Null'

/**
 * @category userTypes
 * @category generated
 */
export const additionalAccountIndicesBeet =
  beet.dataEnum<AdditionalAccountIndicesRecord>([
    [
      'TokenOwnership',
      new beet.BeetArgsStruct<AdditionalAccountIndicesRecord['TokenOwnership']>(
        [['tokenIdx', beet.u8]],
        'AdditionalAccountIndicesRecord["TokenOwnership"]'
      ),
    ],

    [
      'NftOwnership',
      new beet.BeetArgsStruct<AdditionalAccountIndicesRecord['NftOwnership']>(
        [
          ['tokenIdx', beet.u8],
          ['metaIdx', beet.u8],
          ['collectionIdx', beet.u8],
        ],
        'AdditionalAccountIndicesRecord["NftOwnership"]'
      ),
    ],
    ['Null', beet.unit],
  ]) as beet.FixableBeet<AdditionalAccountIndices, AdditionalAccountIndices>
