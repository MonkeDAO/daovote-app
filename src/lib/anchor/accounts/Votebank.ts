/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { SettingsData, settingsDataBeet } from '../types/SettingsData'

/**
 * Arguments used to create {@link Votebank}
 * @category Accounts
 * @category generated
 */
export type VotebankArgs = {
  maxChildId: number
  moderatorMint: web3.PublicKey
  settings: SettingsData[]
  openProposals: number[]
  closedProposals: number[]
}

export const votebankDiscriminator = [246, 0, 127, 171, 195, 58, 226, 102]
/**
 * Holds the data for the {@link Votebank} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Votebank implements VotebankArgs {
  private constructor(
    readonly maxChildId: number,
    readonly moderatorMint: web3.PublicKey,
    readonly settings: SettingsData[],
    readonly openProposals: number[],
    readonly closedProposals: number[]
  ) {}

  /**
   * Creates a {@link Votebank} instance from the provided args.
   */
  static fromArgs(args: VotebankArgs) {
    return new Votebank(
      args.maxChildId,
      args.moderatorMint,
      args.settings,
      args.openProposals,
      args.closedProposals
    )
  }

  /**
   * Deserializes the {@link Votebank} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Votebank, number] {
    return Votebank.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Votebank} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Votebank> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Votebank account at ${address}`)
    }
    return Votebank.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'mdVo394XANGMrVXZCVAaX3AMHYvtTxXwg1sQmDSY1W1'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, votebankBeet)
  }

  /**
   * Deserializes the {@link Votebank} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Votebank, number] {
    return votebankBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Votebank} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return votebankBeet.serialize({
      accountDiscriminator: votebankDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Votebank} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: VotebankArgs) {
    const instance = Votebank.fromArgs(args)
    return votebankBeet.toFixedFromValue({
      accountDiscriminator: votebankDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Votebank} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: VotebankArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Votebank.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link Votebank} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      maxChildId: this.maxChildId,
      moderatorMint: this.moderatorMint.toBase58(),
      settings: this.settings,
      openProposals: this.openProposals,
      closedProposals: this.closedProposals,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const votebankBeet = new beet.FixableBeetStruct<
  Votebank,
  VotebankArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['maxChildId', beet.u32],
    ['moderatorMint', beetSolana.publicKey],
    ['settings', beet.array(settingsDataBeet)],
    ['openProposals', beet.array(beet.u32)],
    ['closedProposals', beet.array(beet.u32)],
  ],
  Votebank.fromArgs,
  'Votebank'
)
