/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { DelegateAddress, delegateAddressBeet } from '../types/DelegateAddress'

/**
 * @category Instructions
 * @category CreateDelegate
 * @category generated
 */
export type CreateDelegateInstructionArgs = {
  delegateAddresses: DelegateAddress[]
}
/**
 * @category Instructions
 * @category CreateDelegate
 * @category generated
 */
export const createDelegateStruct = new beet.FixableBeetArgsStruct<
  CreateDelegateInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['delegateAddresses', beet.array(delegateAddressBeet)],
  ],
  'CreateDelegateInstructionArgs'
)
/**
 * Accounts required by the _createDelegate_ instruction
 *
 * @property [_writable_] delegate
 * @property [_writable_, **signer**] delegator
 * @property [_writable_] treasury
 * @category Instructions
 * @category CreateDelegate
 * @category generated
 */
export type CreateDelegateInstructionAccounts = {
  delegate: web3.PublicKey
  delegator: web3.PublicKey
  treasury: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createDelegateInstructionDiscriminator = [
  27, 99, 122, 21, 236, 229, 58, 10,
]

/**
 * Creates a _CreateDelegate_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateDelegate
 * @category generated
 */
export function createCreateDelegateInstruction(
  accounts: CreateDelegateInstructionAccounts,
  args: CreateDelegateInstructionArgs,
  programId = new web3.PublicKey('mdVo394XANGMrVXZCVAaX3AMHYvtTxXwg1sQmDSY1W1')
) {
  const [data] = createDelegateStruct.serialize({
    instructionDiscriminator: createDelegateInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.delegate,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.delegator,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.treasury,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
