/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { VoteOption, voteOptionBeet } from '../types/VoteOption'
import { SettingsData, settingsDataBeet } from '../types/SettingsData'
import {
  AdditionalAccountIndices,
  additionalAccountIndicesBeet,
} from '../types/AdditionalAccountIndices'

/**
 * @category Instructions
 * @category CreateProposal
 * @category generated
 */
export type CreateProposalInstructionArgs = {
  options: VoteOption[]
  maxOptionsSelectable: number
  data: Uint8Array
  proposalId: number
  settings: SettingsData[]
  additionalAccountOffsets: AdditionalAccountIndices[]
  endTime: beet.bignum
}
/**
 * @category Instructions
 * @category CreateProposal
 * @category generated
 */
export const createProposalStruct = new beet.FixableBeetArgsStruct<
  CreateProposalInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['options', beet.array(voteOptionBeet)],
    ['maxOptionsSelectable', beet.u8],
    ['data', beet.bytes],
    ['proposalId', beet.u32],
    ['settings', beet.array(settingsDataBeet)],
    ['additionalAccountOffsets', beet.array(additionalAccountIndicesBeet)],
    ['endTime', beet.i64],
  ],
  'CreateProposalInstructionArgs'
)
/**
 * Accounts required by the _createProposal_ instruction
 *
 * @property [_writable_] proposal
 * @property [_writable_] votebank
 * @property [_writable_, **signer**] poster
 * @property [_writable_] treasury
 * @category Instructions
 * @category CreateProposal
 * @category generated
 */
export type CreateProposalInstructionAccounts = {
  proposal: web3.PublicKey
  votebank: web3.PublicKey
  poster: web3.PublicKey
  treasury: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createProposalInstructionDiscriminator = [
  132, 116, 68, 174, 216, 160, 198, 22,
]

/**
 * Creates a _CreateProposal_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateProposal
 * @category generated
 */
export function createCreateProposalInstruction(
  accounts: CreateProposalInstructionAccounts,
  args: CreateProposalInstructionArgs,
  programId = new web3.PublicKey('mvotp22LaMG3XrZgSHPSNH7gBCiorrLWfYKKKvTacvu')
) {
  const [data] = createProposalStruct.serialize({
    instructionDiscriminator: createProposalInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.proposal,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.votebank,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.poster,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.treasury,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
