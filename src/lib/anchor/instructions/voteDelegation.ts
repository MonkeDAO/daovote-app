/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { VoteEntry, voteEntryBeet } from '../types/VoteEntry'
import {
  AdditionalAccountIndices,
  additionalAccountIndicesBeet,
} from '../types/AdditionalAccountIndices'

/**
 * @category Instructions
 * @category VoteDelegation
 * @category generated
 */
export type VoteDelegationInstructionArgs = {
  proposalId: number
  voteEntries: VoteEntry[]
  additionalAccountOffsets: AdditionalAccountIndices[]
}
/**
 * @category Instructions
 * @category VoteDelegation
 * @category generated
 */
export const voteDelegationStruct = new beet.FixableBeetArgsStruct<
  VoteDelegationInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['proposalId', beet.u32],
    ['voteEntries', beet.array(voteEntryBeet)],
    ['additionalAccountOffsets', beet.array(additionalAccountIndicesBeet)],
  ],
  'VoteDelegationInstructionArgs'
)
/**
 * Accounts required by the _voteDelegation_ instruction
 *
 * @property [_writable_, **signer**] voter
 * @property [_writable_] votebank
 * @property [_writable_] proposal
 * @property [_writable_] votes
 * @property [] nftVoteMint
 * @property [] delegateAccount
 * @property [_writable_] treasury
 * @category Instructions
 * @category VoteDelegation
 * @category generated
 */
export type VoteDelegationInstructionAccounts = {
  voter: web3.PublicKey
  votebank: web3.PublicKey
  proposal: web3.PublicKey
  votes: web3.PublicKey
  nftVoteMint: web3.PublicKey
  delegateAccount: web3.PublicKey
  treasury: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const voteDelegationInstructionDiscriminator = [
  71, 140, 161, 196, 61, 52, 166, 233,
]

/**
 * Creates a _VoteDelegation_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category VoteDelegation
 * @category generated
 */
export function createVoteDelegationInstruction(
  accounts: VoteDelegationInstructionAccounts,
  args: VoteDelegationInstructionArgs,
  programId = new web3.PublicKey('mdVo394XANGMrVXZCVAaX3AMHYvtTxXwg1sQmDSY1W1')
) {
  const [data] = voteDelegationStruct.serialize({
    instructionDiscriminator: voteDelegationInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.voter,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.votebank,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.proposal,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.votes,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.nftVoteMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.delegateAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.treasury,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
